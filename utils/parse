#!/bin/bash

: ' parse_short
parse space separated and option separated
'
function	parse_short()
{
	local	to_shift=0

	PARSED_ARG=()
	shift
	for item in ${*}; do
		is_option ${item}
		[ ${?} != 0 ] && break
		PARSED_ARG[${#PARSED_ARG[@]}]=${item}
	done
	return ${#PARSED_ARG[@]}
}

function	is_in_list()
{
	local	list_name=${1}
	local	list_src=${2}
	local	list_dst=${3}

}

function	debug_print_parse_arg()
{
	debug_print_array 'DO_PART' ${DO_PART[*]}
}

function	post_parsing()
{
	local	is_good
	local	to_check
	local	from_check

	# check non sens arguments
	## if -p supplied but no arg given
	if [ ${HAVE_PART} == 1 ] && [ ${#DO_PART[@]} == 0 ]; then
		p_error_parse "wrong usage"
	fi
	## if -m supplied but no arg given
	if [ ${HAVE_MODULE} == 1 ] && [ ${#DO_MODULE[@]} == 0 ]; then
		p_error_parse "wrong usage"
	fi
	## if -m and -p supplied both
	if [ ${HAVE_MODULE} == 1 ] && [ "${HAVE_PART}" == 1 ]; then
		p_error_parse "wrong usage"
	fi

	# set to_check and from_check
	## if -m supplied
	if [ ${HAVE_MODULE} == 1 ]; then
		to_check=(${DO_MODULE[*]})
		from_check=(${MODULES[*]})
	## if -p supplied
	elif [ ${HAVE_PART} == 1 ]; then
		to_check=(${DO_PART[*]})
		from_check=(${PARTS[*]})
	## set default and leave
	else
		DO_MODULE=${MODULES[*]}
		DO_PART=${PARTS[*]}
	fi
	# check from input list ...
	for to_str in ${to_check[*]}; do
		# if to_str is equal to all
		if [ ${HAVE_MODULE} == 1 ] && [ ${to_str} == "all" ]; then
			if [ ${#DO_MODULE[@]} -gt 1 ]; then
				p_error_parse "parameter all with option -m should be alone"
			else
				DO_MODULE=(${MODULES[*]})
				break
			fi
		fi
		# (set is_good variable to 0)
		is_good=0
		# ... to default list ...
		for from_str in ${from_check[*]}; do
			# ... if is equal to default.
			if [ "${to_str}" == "${from_str}" ]; then
				# (set is_good variable to 1)
				is_good=1
				# break
				break
			fi
		done
		# if not good from_str
		if [ ${is_good} != 1 ]; then
			# display error
			# if have_part
			if [ ${HAVE_PART} == 1 ]; then
				# print wrong part name
				p_warn "wrong ${green}part${reset} name (${red}${to_str}${reset})"
			else
				#10 print wrong part name
				p_warn "wrong ${green}module${reset} name (${red}${to_str}${reset})"
			fi
			# go to usage func
			usage
		fi
	done
	: 'check if EXEC_PATH is supplied'
	if [ "${EXEC_PATH}" == "" ] || [ ! -x "${EXEC_PATH}" ]; then
		p_error_parse "missing operand (${red}PATH${reset})"
	fi
}

function	usage()
{
	printf "%s : %s PATH [-n] [-p PART...| -m MODULE... ]\n" "${SCRIPT_NAME}" "${SCRIPT_NAME}"
	printf "unit test for minishell project\n"
	printf "\n"
	printf "  -n, --no-color    to disable colors\n"
	printf "  -h, --help        show this help\n"
	printf "\n"
	printf "  -p, --part        install part, available part:\n"
	for part in ${PARTS[*]}; do
	printf "                        - %s\n" "${part}"
	done
	printf "\n"
	printf "  -m, --module      install modules, available module:\n"
	printf "                        - all\n"
	for module in ${MODULES[*]}; do
	printf "                        - %s\n" "${module}"
	done
	exit
}

: 'pars args, keep parsing even if launch modules
if -n, --no-color			disable_color
if -h, --help				help

if -p, --part				set DO_PART=part1 ... partn
if -m, --module				set DO_MODULE=module1 ... modulen

-p && -m						false
-f|-n && -p | --part | -all		true
'
function	parse_arg()
{
	# set default value
	HAVE_MODULE=0
	HAVE_PART=0
	NO_ANSI=0
	EXEC_PATH=""

	while [ "${1}" != "" ]; do
		case ${1} in
			-h|--help)
				usage
				;;
			-p|--part)
				parse_short ${*}
				shift $?
				DO_PART=(${PARSED_ARG[*]})
				HAVE_PART=1
				;;
			-m|--module)
				parse_short ${*}
				shift $?
				DO_MODULE=(${PARSED_ARG[*]})
				HAVE_MODULE=1
				;;
			-n|--no-color)
				NO_ANSI=1
				p_remove_colors
				;;
			*)
				[[ "${1}" =~ ^--?.* ]] && p_error_parse "invalid options -- '${1}'"
				TMP_PATH=$(realpath ${1})
				[ ! -f "${TMP_PATH}" ] && p_error_parse "${1}: no such file"
				EXEC_PATH=${TMP_PATH}
				;;
		esac
		shift
	done
	post_parsing
	[ ${DEBUG} ] && debug_print_parse_arg
}
