#!/bin/bash

#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#==#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#
#> echo deep

function	echo_log_section()
{
	: "
	INFO
		LIB				log
		FUNCTION		main_title
		DESC			wrapper of log::print to print a section
		ARG				[1] msg=${1:-}
						[2] mode=${2:-3}
						[3] title_color=${3:-${LOG_TITLE_DEFAULT_COLOR}}
		RETURN_VALUE	None
	"
	local	msg="${1:-}"
	local	mode="${2:-3}"
	local	enable_date="${3:-}"
	local	title_color="${4:-${DEEP_SEC_COLOR}}"
	local	section_str
	local	date
	local	section
	local	msg_len

	printf -v vertical_offset "%0.s${HO}" $(seq 3 ${LOG_TITLE_LENGTH})
	# Filter out all ansi color
	msg_len=$(printf "%b" "${msg}" | perl -pe 's|\001.*?\002||g' | wc -m)
	center_off=$((${LOG_TITLE_LENGTH} - ${msg_len}))
	center_splited=$(( (${center_off} - 2) / 2 ))
	if [ $(( ${center_off} % 2)) == 0 ]; then
		printf -v CL[0] "%0.s " $(seq 1 ${center_splited})
		printf -v CR[0] "%0.s " $(seq 1 ${center_splited})
	else
		printf -v CL[0] "%0.s " $(seq 1 ${center_splited})
		printf -v CR[0] "%0.s " $(seq 1 ${center_splited}) 1
	fi
	printf -v date " %(%H:%m:%y %x)T"
	center_off=$((${LOG_TITLE_LENGTH} - ${#date}))
	center_splited=$(( (${center_off} - 2) / 2 ))
	if [ $(( ${center_off} % 2)) == 0 ]; then
		printf -v CL[1] "%0.s " $(seq 1 ${center_splited})
		printf -v CR[1] "%0.s " $(seq 1 ${center_splited})
	else
		printf -v CL[1] "%0.s " $(seq 1 ${center_splited})
		printf -v CR[1] "%0.s " $(seq 1 ${center_splited}) 1
	fi
	section[0]="${title_color}${UL}${vertical_offset}${UR}\n"
	section[1]="${VE}${CL[0]}${reset}${1}${title_color}${CR[0]}${VE}\n"
	if [ "${enable_date}" == "1" ]; then
		section[2]="${VE}${CL[1]}${reset}${date}${title_color}${CR[1]}${VE}\n"
		section[3]="${LL}${vertical_offset}${LR}${reset}"
	else
		section[2]="${LL}${vertical_offset}${LR}${reset}"
	fi
	for index in $(seq 0 $((${#section[@]} - 1))); do
		section_str="${section_str:-}${section[${index}]}"
	done
	section_str=$(printf "%b" "${section_str}" | tr -d '\001\002')
	[ ${NO_ANSI} == "0" ] && p_toggle_color 0
	echo_log 0 -1 "${section_str}" 1
}

function	echo_log()
{
	local	offset=${1}
	local	mode=${2}
	local	msg=${3}
	local	print_out=${4}
	local	first_part=""
	local	offset_tab=""

	while [ "${offset}" != "0" ]; do
		offset_tab="${offset_tab}${PRINT_LOG_OFFSET_STR}"
		offset=$((${offset} - 1))
	done
	if [ ${mode} == -1 ]; then
		first_part="${msg}"
	elif [ ${mode} == 0 ]; then
		first_part="${FAILED}${msg}"
	elif [ ${mode} == 1 ]; then
		first_part="${SUCCESS}${msg}"
	elif [ ${mode} == 2 ]; then
		first_part="${INFO}${msg}"
	elif [ ${mode} == 3 ]; then
		first_part="${WARN}${msg}"
	fi
	msg=$(printf "%s" "${first_part}" | sed "s|^|${offset_tab}|")
	if [ "${print_out}" == 1 ]; then
		printf "%b\n" "${msg}"
	fi
	printf "%b\n" "${msg}" >> ${DEEPTHOUGHT_FILE}
}

function	echo_log_new_line()
{
	echo_log 0 -1 "" 1
}

function	reset_deepfile()
{
	[ -f ${DEEPTHOUGHT_FILE} ] && rm -f ${DEEPTHOUGHT_FILE}
	echo_log_section "MINISHELL tester (${orange}pix${reset})." 1 1
}

function	echo_log_part() {
	local	part_str=${orange}${1}${reset}
	local	part_name=${2}

	DEEP_PART_NAME=${part_name}
	echo_log_new_line
	echo_log 0 3 "${blue}${part_name}${reset} ${part_str}" 1
}

function	echo_log_sect()
{
	local	sect_name=${1}
	local	part_name=${blue}${DEEP_PART_NAME}${reset}

	echo_log_new_line
	echo_log 1 2 "${part_name} ${sect_name}" 1
}

function	echo_log_current_cmd()
{
	local	mode=${1}
	local	curr_cmd=(${*})
	local	to_print_cmd=()
	local	to_print_str=""

	for item in ${curr_cmd[*]:1}; do
		if [ -f ${item} ] || [ -d ${item} ]; then
			[ ${DEBUG} ] && printf "file : %s\n" "${item}"
			if [ "${to_print_str}" == "" ]; then
				to_print_str="${item/${DIR_BASE}/.}"
			else
				to_print_str="${to_print_str} ${item/${DIR_BASE}/.}"
			fi
		else
			[ ${DEBUG} ] && printf "item : %s\n" "${item}"
			if [ "${to_print_str}" == "" ]; then
				to_print_str="${item}"
			else
				to_print_str="${to_print_str} ${item}"
			fi
		fi
	done
	echo_log 2 3 "\`${blue}${to_print_str}${reset}'" ${mode}
}

#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#==#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#
